# -*- coding: utf-8 -*-
"""survival prediction of a passenger using MACHINE LEARNING techniques.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZFMnoi9LUSXNvJSGS2UXjFDdiiFzDGaq
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""Data collection and processing

"""

#load the data from csv file to pandas Dataframe
titanic_data=pd.read_csv("/content/Titanic-Dataset.csv")

# printing first 5 rows of dataframe
titanic_data.head()

#number of rows and columns
titanic_data.shape

#Target column=survived,remaing columns=features
#getting information about data
titanic_data.info()

#To check number of missing values
titanic_data.isnull().sum()

"""Handling missing values"""

#drop the "cabin" column from data frame
titanic_data=titanic_data.drop(columns='Cabin',axis=1)

#To check number of missing values after dropping cabin column
titanic_data.isnull().sum()

#statistical data
titanic_data.describe()

#replacing missing values in age column with mean age
titanic_data['Age'].fillna(titanic_data['Age'].mean(),inplace=True)

#finding mode value of 'embarked' column
(titanic_data['Embarked'].mode())

print(titanic_data['Embarked'].mode()[0])

#replacing missing values in 'embarked' column with mode of embarked column
titanic_data['Embarked'].fillna(titanic_data['Embarked'].mode()[0],inplace=True)

#checking missing value
titanic_data.isnull().sum()

"""DATA ANALYSIS"""

#Getting statistical measure about data
titanic_data.describe()

#finding number of ppl survived and not survived
titanic_data['Survived'].value_counts()

"""DATA VISUALIZATION"""

#Giving theme
sns.set()

#making count plot for survived column
sns.countplot(x='Survived', data=titanic_data)

#counts based on gender
titanic_data['Sex'].value_counts()

##making count plot for sex column
sns.countplot(x='Sex', data=titanic_data)

#finding number of ppl survived and not survived based on gender
sns.countplot(x='Sex',hue='Survived',data=titanic_data)
#conclussion:females given more priority to be saved

#making count plot for pclass column
sns.countplot(x='Pclass', data=titanic_data)

#finding number of ppl survived and not survived based on class
sns.countplot(x='Pclass',hue='Survived',data=titanic_data)

"""Encoding the categorical columns as machine readable formats 0's and 1's"""

titanic_data['Sex'].value_counts()

titanic_data['Embarked'].value_counts()

#converting categorical columns:c-cherbourg,Q-queenstown,S-southampton
titanic_data.replace({'Sex':{'male':0,'female':1},'Embarked':{'S':0,'C':1,'Q':2}},inplace=True)

titanic_data.head()

"""seperating target and features"""

#droping certain columns which doesn't add meaning to our target
x=titanic_data.drop(columns=['Name','PassengerId','Survived','Ticket'],axis=1)
y=titanic_data['Survived']

print(x)

print(y)

"""splitting data into training and test data"""

#arrays
X_train,X_test,Y_train,Y_test=train_test_split(x,y,test_size=0.2,random_state=2)

print(x.shape,X_train.shape,X_test.shape)

"""model training
LOGISTIC REGRESSION
"""

model=LogisticRegression()

#training logistic regression model with training data
model.fit(X_train,Y_train)

"""MODEL EVALUATION"""

#ACCURACY OF TRAINING DATA
X_train_prediction=model.predict(X_train)

print(X_train_prediction)

training_data_accuracy=accuracy_score(Y_train,X_train_prediction)
print("Accuracy score of training data: ", training_data_accuracy)

#ACCURACY OF TESTING DATA
X_test_prediction=model.predict(X_test)

print(X_test_prediction)

testing_data_accuracy=accuracy_score(Y_test,X_test_prediction)
print("Accuracy score of testing data set :",testing_data_accuracy)